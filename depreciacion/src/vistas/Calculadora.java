package vistas;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Dimension;
import javax.swing.JTable;

import clases.MetodoLineal;
import clases.MetodoDobleSaldoDecreciente;
import clases.MetodoSumaAnios;

public class Calculadora extends javax.swing.JFrame {

    /**
     * Creates new form Calculadora
     */
    public Calculadora() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        txtPrecioCompra = new javax.swing.JTextField();
        txtValorRescate = new javax.swing.JTextField();
        txtAnosVidaUtil = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnLineal = new javax.swing.JRadioButton();
        btnSaldo = new javax.swing.JRadioButton();
        btnSuma = new javax.swing.JRadioButton();
        btnCalcular = new javax.swing.JButton();
        tableContainer = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtPrecioCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioCompraActionPerformed(evt);
            }
        });

        jLabel1.setText("Precio compra:");

        jLabel2.setText("Valor de rescate:");

        jLabel3.setText("Años de vida útil:");

        buttonGroup1.add(btnLineal);
        btnLineal.setSelected(true);
        btnLineal.setText("Depreciación lineal");
        btnLineal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLinealActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnSaldo);
        btnSaldo.setText("Doble saldo creciente");

        buttonGroup1.add(btnSuma);
        btnSuma.setText("Suma de los años");

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtValorRescate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPrecioCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCalcular)
                            .addComponent(txtAnosVidaUtil, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLineal)
                    .addComponent(btnSaldo)
                    .addComponent(btnSuma))
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableContainer)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecioCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnLineal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtValorRescate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnSaldo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAnosVidaUtil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(btnSuma))
                .addGap(18, 18, 18)
                .addComponent(btnCalcular)
                .addGap(18, 18, 18)
                .addComponent(tableContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLinealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinealActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLinealActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed

        // Obtener los valores de los controles,
        // convertir los valores de string a float
        float precioCompra = parseFloat(txtPrecioCompra.getText());
        float valorRescate = parseFloat(txtValorRescate.getText());
        float anosVidaUtil = parseFloat(txtAnosVidaUtil.getText());
        
        // Iniciar una nueva matriz para mostrar el resultado en una tabla
        tableData = new Object[(int) Math.ceil(anosVidaUtil)][2];
        
        if (btnLineal.isSelected()) {
            // Inicializar un nuevo objeto depreciación dependiendo del tipo seleccionado
            MetodoLineal metodoLineal = new MetodoLineal(precioCompra, valorRescate, anosVidaUtil);

            // TODO: ver esta función podría bien ser llamada internamente en la clase MetodoLineal
            metodoLineal.setValorDepreciable();       
            
            // Rellenar matriz 2x2 con los resultados
            for (int i = 0; i < anosVidaUtil; i++) {
                // Primer columna son los años
                tableData[i][0] = i + 1;
                // Segunda columna depreciacion
                tableData[i][1] = metodoLineal.depreciacionAnual();
            }
        }

        if (btnSaldo.isSelected()) {
            // Inicializar un nuevo objeto depreciación dependiendo del tipo seleccionado
            MetodoDobleSaldoDecreciente metodoDobleSaldoDecreciente = new MetodoDobleSaldoDecreciente(precioCompra, valorRescate, anosVidaUtil);
            metodoDobleSaldoDecreciente.setTasaDepreciacion();

            float valorDepreciableAnioAnterior = metodoDobleSaldoDecreciente.getPrecioCompra();
            float depreciacionAnualAnterior = 0;
            boolean continueEval = true;
            
            for (int i = 0; i < anosVidaUtil; i ++) {
                if (continueEval) {
                    metodoDobleSaldoDecreciente.setValorDepreciable(valorDepreciableAnioAnterior, depreciacionAnualAnterior);
                    // Guardar valores anteriores
                    valorDepreciableAnioAnterior = metodoDobleSaldoDecreciente.getValorDepreciable();
                    depreciacionAnualAnterior = metodoDobleSaldoDecreciente.depreciacionAnual();
                }
                // Rellenar matriz con los resultados
                tableData[i][0] = i + 1;
                tableData[i][1] = continueEval ? metodoDobleSaldoDecreciente.depreciacionAnual() : "No se devalua";
                
                // Condicion para seguir devaluando
                continueEval = metodoDobleSaldoDecreciente.getValorRescate() < metodoDobleSaldoDecreciente.depreciacionAnual();
            }
        }
        
        
        if (btnSuma.isSelected()) {
            // Inicializar un nuevo objeto depreciación dependiendo del tipo seleccionado
            MetodoSumaAnios metodoSumaAnios = new MetodoSumaAnios(precioCompra, valorRescate, anosVidaUtil);

            // Esta tabla tiene diferentes columnas gg
            // aunque saber si hay que mostrarlas todas o solo la depreciacion anual
            tableData = new Object[(int) Math.ceil(anosVidaUtil)][7];
            
            int anioDepreciacion = (int) metodoSumaAnios.getAniosVida();
            
            for (int i = 0; i < anosVidaUtil; i ++) {
                
                metodoSumaAnios.setTasaDepreciacion(i);
                
                // Dado que es el primer año, aun no hay un valorFinalLibros,
                // utilizar el precio de compra
                if (i < 1) metodoSumaAnios.setValorInicialLibros();
                
                metodoSumaAnios.setValorDepreciable();
                metodoSumaAnios.setGastoXDepreciacion();
                
                float depreciacionAnualAnterior = metodoSumaAnios.depreciacionAnual();
                
                metodoSumaAnios.setDepreciacionAcumulada(depreciacionAnualAnterior);
                metodoSumaAnios.setValorFinalLibros();
                
                // Rellenar matriz con los resultados
                tableData[i][0] = i + 1;
                tableData[i][1] = metodoSumaAnios.getValorInicialLibros();
                tableData[i][2] = metodoSumaAnios.getValorDepreciable();
                tableData[i][3] = metodoSumaAnios.getTasaDepreciacion();
                tableData[i][4] = metodoSumaAnios.getGastoXDepreciacion();
                tableData[i][5] = metodoSumaAnios.getDepreciacionAcumulada();
                tableData[i][6] = metodoSumaAnios.getValorFinalLibros();
                
                metodoSumaAnios.setValorInicialLibros(metodoSumaAnios.getValorFinalLibros());
                anioDepreciacion -= 1;                
            }

        }
        
        // Crear un nueva tabla con los resultados
        // Si la opcion seleccionada es SUMA usar las otras columnas
        resultTable = new JTable(tableData, btnSuma.isSelected() ? tableColumnsSuma : tableColumns);
        // Apendearla a su contenedor
        tableContainer.setViewportView(resultTable);        
    }//GEN-LAST:event_btnCalcularActionPerformed

    // Safe way de parsear string a float
    private float parseFloat(String str) {
        float convertedValue = 0;
        if (str != null && !str.isEmpty()) {
            try {
                convertedValue = Float.parseFloat(str);
            } catch (NumberFormatException e) {
                Logger.getLogger(Calculadora.class.getName()).log(Level.WARNING, "Error while trying to parse string wtf: \"{0}\".", str);
            }
        }
        return convertedValue;
    }
    
    private void txtPrecioCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioCompraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioCompraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculadora().setVisible(true);
            }
        });
    }
    // Own variables
    private JTable resultTable;
    private final String[] tableColumns = {
        "Año",
        "Valor"
    };
    private final String[] tableColumnsSuma = {
        "Año",
        "Valor Inicial en Libros",
        "Valor Depreciable",
        "Tasa Depreciacion",
        "Gasto por Depreciacion",
        "Depreciacion Acumulada",
        "Valor final en libros",
    };
    private Object[][] tableData = new Object[0][0];;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JRadioButton btnLineal;
    private javax.swing.JRadioButton btnSaldo;
    private javax.swing.JRadioButton btnSuma;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane tableContainer;
    private javax.swing.JTextField txtAnosVidaUtil;
    private javax.swing.JTextField txtPrecioCompra;
    private javax.swing.JTextField txtValorRescate;
    // End of variables declaration//GEN-END:variables
}
